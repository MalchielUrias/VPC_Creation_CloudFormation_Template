---
AWSTemplateFormatVersion: 2010-09-09

Description: Simple VPC CloudFromation Template to host WordPress on AWS - Creates New VPC

Metadata:

  Authors:
    Description: Malchiel Ed Urias (malchieluriasbusiness@gmail.com)

  AWS::CloudFormation::Interface:

    ParameterGroups:
    - Label:
        default: Amazon VPC Parameters
      Parameters:
      - NumberOfAZs
      - VPCSecurityGroupName  
      - AvailabilityZones
      - VpcCidr
      - VpcTenancy
      - PublicSubnet1Cidr
      - PublicSubnet2Cidr
     
      # - PrivateSubnet1Cidr
      # - PrivateSubnet2Cidr

    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      NumberOfAZs:
        default: Number of Availability Zones
      VpcCidr:
        default: VpcCidr
      VpcTenancy:
        default: VpcTenancy
      PublicSubnet1Cidr:
        default: Public Subnet 1
      PublicSubnet2Cidr:
        default: Public Subnet 2
      VPCSecurityGroupName:
        default: VPC Security GroupName
      # PrivateSubnet1Cidr:
      #   default: Private Subnet 1
      # PrivateSubnet2Cidr:
      #   default: Private Subnet 2

      
Parameters:

  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  NumberOfAZs:
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 2
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: Number
  VpcCidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VpcTenancy:
    AllowedValues:
    - default
    - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
  PublicSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.201.0/24
    Description: CIDR block for Public subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.202.0/24
    Description: CIDR block for Public subnet 2 located in Availability Zone 2
    Type: String
  # PrivateSubnet1Cidr:
  #   AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
  #   ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  #   Default: 10.0.203.0/24
  #   Description: CIDR block for Private subnet 2 located in Availability Zone 1
  #   Type: String
  # PrivateSubnet2Cidr:
  #   AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
  #   ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  #   Default: 10.0.204.0/24
  #   Description: CIDR block for Private subnet 2 located in Availability Zone 2
  #   Type: String
  VPCSecurityGroupName:
    Type: String
    Description: A name for the security group for our vpc
    Default: VPC Security Group
  
  
Conditions:

  NumberOfAZs1:
      !Equals [ '1', !Ref NumberOfAZs ]
  NumberOfAZs2:
      !Equals [ '2', !Ref NumberOfAZs ]
  NumberOfAZs3:
      !Equals [ '3', !Ref NumberOfAZs ]
  AZ1: !Or
    - !Condition NumberOfAZs1
    - !Condition NumberOfAZs2
    - !Condition NumberOfAZs3
  AZ2: !Or
    - !Condition NumberOfAZs2
    - !Condition NumberOfAZs3
  AZ3: !Condition NumberOfAZs3
  # AZ3: !Or
  #   - !Condition NumberOfAZs4
  #   - !Condition NumberOfAZs5
  #   - !Condition NumberOfAZs6
  # AZ4: !Or
  #   - !Condition NumberOfAZs5
  #   - !Condition NumberOfAZs6
  # AZ5: !Condition NumberOfAZs6

Resources:

  PublicSubnet1:
    Condition: AZ1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet1 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref Vpc
  PublicSubnet2:
    Condition: AZ2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet2 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref Vpc
  
  # PublicSubnetRouteTableAssociation1:
  #   Condition: AZ1
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnet1
  # PublicSubnetRouteTableAssociation2:
  #   Condition: AZ2
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnet2
 
  # PrivateSubnet1:
  #   Condition: AZ1
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
  #     CidrBlock: !Ref PrivateSubnet1Cidr
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Join [ '', [ 'PrivateSubnet1 / ', !Ref 'AWS::StackName' ] ]
  #       - Key: SubnetType
  #         Value: Private
  #     VpcId: !Ref Vpc
  # PrivateSubnet2:
  #   Condition: AZ2
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
  #     CidrBlock: !Ref PrivateSubnet2Cidr
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Join [ '', [ 'PrivateSubnet2 / ', !Ref 'AWS::StackName' ] ]
  #       - Key: SubnetType
  #         Value: Private
  #     VpcId: !Ref Vpc


  # PrivateSubnetRouteTableAssociation1:
  #   Condition: AZ1
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref PrivateSubnet1
  # PrivateSubnetRouteTableAssociation2:
  #   Condition: AZ2
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref PrivateSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'InternetGateway / ', !Ref 'AWS::StackName' ] ]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # NatEIP1:
  #   Condition: AZ1
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  # NatGateway1:
  #   Condition: AZ1
  #   Type: AWS::EC2::NatGateway
  #   DependsOn: AttachInternetGateway
  #   Properties:
  #     AllocationId: !GetAtt NatEIP1.AllocationId
  #     SubnetId: !Ref PublicSubnet1
  # NatRoute1:
  #   Condition: AZ1
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref NatRouteTable1
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGateway1
  # NatRouteTable1:
  #   Condition: AZ1
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     Tags:
  #       - Key: Name
  #         Value: !Join [ '', [ 'NatRouteTable1 / ', !Ref 'AWS::StackName' ] ]
  #       - Key: Network
  #         Value: Public
  #     VpcId: !Ref Vpc


#Route Table and Route table Associations

  # PrivateRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachInternetGateway
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGateway1
  # PrivateRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref Vpc
  #     Tags:
  #       - Key: Name
  #         Value: !Join [ '', [ 'PrivateRouteTable / ', !Ref 'AWS::StackName' ] ]
  # PrivateRouteTableAssociation1:
  #   Condition: AZ1
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet1
  #     RouteTableId: !Ref PrivateRouteTable
  # PrivateRouteTableAssociation2:
  #   Condition: AZ2
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet2
  #     RouteTableId: !Ref PrivateRouteTable


  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicRouteTable / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref Vpc
  PublicRouteTableAssociation1:
    Condition: AZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation2:
    Condition: AZ2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
    
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Vpc / ', !Ref 'AWS::StackName' ] ]
  # VpcFlowLog:
  #   Type: AWS::EC2::FlowLog
  #   Properties:
  #     DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
  #     LogGroupName: !Join [ '', [ !Ref 'AWS::StackName', '-FlowLog' ] ]
  #     ResourceId: !Ref Vpc
  #     ResourceType: VPC
  #     TrafficType: ALL
  # VpcFlowLogsLogGroup:
  #   Type: AWS::Logs::LogGroup
  # VpcFlowLogsRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Action:
  #             - sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - vpc-flow-logs.amazonaws.com
  #     Path: '/'
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:DescribeLogGroups
  #                 - logs:DescribeLogStreams
  #                 - logs:PutLogEvents
  #               Effect: Allow
  #               Resource: '*'

  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
        GroupDescription: Security group for VPC        
        GroupName: !Ref VPCSecurityGroupName
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0
        Tags: 
          - Key: Name
            Value: !Join [ '', [ 'VPCSecurityGroup / ', !Ref 'AWS::StackName' ] ]
        VpcId: !Ref Vpc  


Outputs:
  
  Vpc:
    Value: !Ref Vpc
  VpcCidr:
    Value: !Ref VpcCidr
  PublicSubnet1:
    Condition: AZ1
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Condition: AZ2
    Value: !Ref PublicSubnet2
  # PrivateSubnet1:
  #   Condition: AZ1
  #   Value: !Ref PrivateSubnet1
  # PrivateSubnet2:
  #   Condition: AZ2
  #   Value: !Ref PrivateSubnet2 
  # PrivateSubnet:
  #   Value:
  #     !If
  #       [ NumberOfAZs1,
  #       !Ref PrivateSubnet1,
  #         !Join [ ',', [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
  #         ] 
  PublicSubnet:
    Value:
      !If
        [ NumberOfAZs1,
        !Ref PublicSubnet1,
          !Join [ ',', [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
          ]
  VPCSecurityGroup:
    Description: Security group for VPC
    Value: !Ref VPCSecurityGroup

